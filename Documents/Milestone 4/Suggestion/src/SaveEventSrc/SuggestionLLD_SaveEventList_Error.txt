title Suggestion Sequence Diagram (Save Event List With Error Handling)

participant FrontEnd #green
participant SuggestionController #orange
participant AuthorizationManager #red
participant SuggestionManager #lightgreen
participant EventAPIService #cyan
participant Event #blue
participant SuggestionDAO #lightblue
participant BaseResponse #brown
participant MicrosoftSQL Server #grey

activecolor FrontEnd #green
activecolor SuggestionController #orange
activecolor AuthorizationManager #red
activecolor SuggestionManager #lightgreen
activecolor EventAPIService #cyan
activecolor Event #blue
activecolor SuggestionDAO #lightblue
activecolor BaseResponse #brown
activecolor MicrosoftSQL Server #grey
autoactivation

SuggestionController->AuthorizationManager:Dependencies Injection: new AuthorizationManager( )
AuthorizationManager->AuthorizationManager:AuthorizationManager( )
AuthorizationManager-->SuggestionController:return _authzManager
SuggestionController->SuggestionManager:Dependencies Injection: new SuggestionManager( )
SuggestionManager->SuggestionManager:SuggestionManager( )
SuggestionManager->EventAPIService: new EventAPIService( )
EventAPIService->EventAPIService:EventAPIService( )
EventAPIService-->SuggestionManager:return _eventAPIService
SuggestionManager->SuggestionDAO: new SuggestionDAO( )
SuggestionDAO->SuggestionDAO:SuggestionDAO( )
SuggestionDAO-->SuggestionManager:return _suggestionDAO
SuggestionManager-->SuggestionController:return _suggestionManager

FrontEnd->SuggestionController:HTTP Header(int userID, string token, string claimRole) \n(List<Event> eList)

// The start of API call
SuggestionController->SuggestionController:async ActionResult<SuggestionResponse> SaveEvent\n(List<Event> eList)
group if (token == null)
SuggestionController-->FrontEnd:return BadRequest("Inavalid Token")
end 
SuggestionController->SuggestionController:bool isAuthorized = _authzManager.IsAuthorized\n(int userID, string token, string claimRole)

group if (isAuthorized == false)
SuggestionController-->FrontEnd:return BadRequset\n("Not authorized to use access this feature")
end

//
group else
SuggestionController->SuggestionManager:async ActionResult<BaseResponse> SaveEvent(List<Event> eList)
SuggestionManager->SuggestionDAO:async BaseResponse SuggestionDAO.SaveEvent(List<Event> selectedEvents)

alt #red try (Saving Events to the Database)
//Loop to save event
group #green foreach (Event e in selectedEvents)
SuggestionDAO->SuggestionDAO:_dbContext.Events.Add(Event e)
end 
SuggestionDAO->MicrosoftSQL Server:_dbContext.SaveChangesAsync( )
MicrosoftSQL Server-->SuggestionDAO:throw SQL Exception

else catch SQL Exception ex (Roll back changes)
group #green foreach (Event e in selectedEvents)
group #green if (_dbcontext.Events.Any(dbevent => dbevent.EventName == e.EventName))
SuggestionDAO->SuggestionDAO:_dbContext.Events.Remove(Event e)
end 
end 
SuggestionDAO->BaseResponse:new BaseReponse(ex.Message( ), false)
BaseResponse->BaseResponse:BaseResponse(string message, bool isSuccessfull)
BaseResponse-->SuggestionDAO:return BaseResponse
end

SuggestionDAO-->SuggestionManager:return BaseResponse
SuggestionManager-->SuggestionController:return BaseResponse
end

