title Suggestion Sequence Diagram (Get Event with Input Errors)

participant FrontEnd #green
participant SuggestionController #orange
participant AuthorizationManager #red
participant SuggestionManager #lightgreen
participant Validator #purple
participant EventAPIService #cyan
participant Event #blue
participant SuggestionDAO #lightblue
participant SuggestionResponse #brown

activecolor FrontEnd #green
activecolor SuggestionController #orange
activecolor AuthorizationManager #red
activecolor SuggestionManager #lightgreen
activecolor EventAPIService #cyan
activecolor Event #blue
activecolor SuggestionDAO #lightblue
activecolor SuggestionResponse #brown
activecolor Validator #purple

autoactivation


SuggestionController->AuthorizationManager:Dependencies Injection: new AuthorizationManager( )
AuthorizationManager->AuthorizationManager:AuthorizationManager( )
AuthorizationManager-->SuggestionController:return _authzManager
SuggestionController->SuggestionManager:Dependencies Injection: new SuggestionManager( )
SuggestionManager->SuggestionManager:SuggestionManager( )
SuggestionManager->EventAPIService: new EventAPIService( )
EventAPIService->EventAPIService:EventAPIService( )
EventAPIService-->SuggestionManager:return _eventAPIService
SuggestionManager->SuggestionDAO: new SuggestionDAO( )
SuggestionDAO->SuggestionDAO:SuggestionDAO( )
SuggestionDAO-->SuggestionManager:return _suggestionDAO
SuggestionManager-->SuggestionController:return _suggestionManager

FrontEnd->SuggestionController:HTTP Header(int userID, string token, string claimRole) \n(string category, string location, DateTime date)

// The start of API call
SuggestionController->SuggestionController:async ActionResult<SuggestionResponse> GetEvent\n(string category, string location, DateTime date)
group if (token == null)
SuggestionController-->FrontEnd:return BadRequest("Inavalid Token")
end 
SuggestionController->SuggestionController:bool isAuthorized = _authzManager.IsAuthorized\n(int userID, string token, string claimRole)

group if (isAuthorized == false)
SuggestionController-->FrontEnd:return BadRequset\n("Not authorized to use access this feature")
end

//
group else
//Instantiate necessary classes

SuggestionManager->SuggestionManager:async SuggestionResponse SuggestionManager.GetEvent\n(string cat, string location, Datetime date)

//Input check
alt #red if category is invalid
SuggestionManager->Validator:static bool IsCategoryValid(string cat)
Validator-->SuggestionManager:return false
else 
SuggestionManager->SuggestionResponse:return new SuggestionResponse("category is invalid", false, new List<Event> e)
SuggestionResponse->SuggestionResponse:new SuggestionResponse(string message, bool isSuccessful, List<Event> data)
SuggestionResponse-->SuggestionManager:return suggestionResponse
SuggestionManager-->SuggestionController:return suggestionResponse
SuggestionController-->FrontEnd:return suggestionResponse
end 

alt #red if location is false
SuggestionManager->Validator:static bool IsStringInputValid(string location)
Validator-->SuggestionManager:return false
else 
SuggestionManager->SuggestionResponse:return new SuggestionResponse("Location is invalid", false, new List<Event> e)
SuggestionResponse->SuggestionResponse:new SuggestionResponse(string message, bool isSuccessful, List<Event> data)
SuggestionResponse-->SuggestionManager:return suggestionResponse
SuggestionManager-->SuggestionController:return suggestionResponse
SuggestionController-->FrontEnd:return suggestionResponse
end 

alt #red if the Datetime is false
SuggestionManager->Validator:static bool IsDateTimeValid(DateTime date)
Validator-->SuggestionManager:return false
else 
SuggestionManager->SuggestionResponse:return new SuggestionResponse("The date is invalid", false, new List<Event> e)
SuggestionResponse->SuggestionResponse:new SuggestionResponse(string message, bool isSuccessful, List<Event> data)
SuggestionResponse-->SuggestionManager:return suggestionResponse
SuggestionManager-->SuggestionController:return suggestionResponse
SuggestionController-->FrontEnd:return suggestionResponse
end 
end

