title Hyperlink Sharing LLD (Remove User)

participant FrontEnd #lightgreen
participant HyperlinkController #lightpink
participant AuthorizationManager #lightsalmon
participant HyperlinkManager #lightgreen
participant Validator #lightyellow
participant HyperlinkDAO #lightblue
participant HyperlinkResponse #lightcoral
participant MicrosoftSQL Server #gray

activecolor FrontEnd #lightgreen
activecolor HyperlinkController #lightpink
activecolor AuthorizationManager #lightsalmon
activecolor HyperlinkManager #lightgreen
activecolor Validator #lightyellow
activecolor HyperlinkDAO #lightblue
activecolor HyperlinkResponse #lightcoral
activecolor MicrosoftSQL Server #gray

autoactivation 
HyperlinkController->AuthorizationManager:Dependency Injection: new AuthorizationManager( )
AuthorizationManager->AuthorizationManager:AuthorizationManager( )
AuthorizationManager-->HyperlinkController:return _authzManager

HyperlinkController->HyperlinkManager:Dependency Injection: new HyperlinkManager( )
HyperlinkManager->HyperlinkManager:HyperlinkManager( )
//Instantiate classes
HyperlinkManager->HyperlinkDAO: new HyperlinkDAO( )
HyperlinkDAO->HyperlinkDAO:HyperlinkDAO( )
HyperlinkDAO-->HyperlinkManager:return _hyperlinkDAO
HyperlinkManager-->HyperlinkController:return _hyperlinkManager


FrontEnd->HyperlinkController:HTTP Header(int userID, string token, string claimRole) \n(string email, int itineraryID)


HyperlinkController->HyperlinkController:ActionResult<HyperlinkResponse> RemoveUser( )
group if (token == null)
HyperlinkController-->FrontEnd:throw new BadRequest("Invalid Token")
end 
HyperlinkController->HyperlinkController:bool isAuthorized = _authzManager.IsAuthorized\n(int userID, string token, string claimRole)

group if (isAuthorized == false)
HyperlinkController-->FrontEnd:throw new BadRequest\n("Not authorized to use access this feature")
end

group else
HyperlinkManager->HyperlinkManager:HyperlinkResponse HyperlinkManager.RemoveUserFromItinerary\n(string email, int itineraryID)

// Input Validation Errors
alt #red If email is false
HyperlinkManager->Validator:static bool IsEmailValid(string email)
Validator-->HyperlinkManager:return false
HyperlinkManager->HyperlinkResponse:return new HyperlinkResponse("Email is invalid", false, new Itinerary data)
HyperlinkResponse->HyperlinkResponse:new HyperlinkResponse(string message, bool isSuccessful, Itinerary data)
HyperlinkResponse-->HyperlinkManager:return hyperlinkResponse
HyperlinkManager-->HyperlinkController:return hyperlinkResponse
HyperlinkController-->FrontEnd:return hyperlinkResponse
end 

alt #red If ID is false
HyperlinkManager->Validator:static bool IsEmailValid(int itineraryID)
Validator-->HyperlinkManager:return false
HyperlinkManager->HyperlinkResponse:return new HyperlinkResponse("ID is invalid", false, new Itinerary data)
HyperlinkResponse->HyperlinkResponse:new HyperlinkResponse(string message, bool isSuccessful, Itinerary data)
HyperlinkResponse-->HyperlinkManager:return hyperlinkResponse
HyperlinkManager-->HyperlinkController:return hyperlinkResponse
HyperlinkController-->FrontEnd:return hyperlinkResponse
end 
end